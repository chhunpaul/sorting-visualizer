{"version":3,"sources":["components/Navigation.jsx","sortingAlgorithms/sortingAlgorithms.jsx","sortingVisualizer/sortingVisualizer.jsx","sortingVisualizer/mergeSortVisualizer.jsx","sortingVisualizer/bubbleSortVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","to","createAnimation","type","indexes","cmd","getMergeSortAnimations","array","animations","length","arrayCopy","slice","_mergeSort","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","_merge","SortingVisualizer","props","state","arraySize","animationTimeouts","animationSpeedMS","primaryColor","sortedColor","onSizeChange","bind","this","resetArray","arrayBars","document","getElementsByClassName","style","backgroundColor","clearTimeout","setState","e","cancel","updateSize","target","value","randNum","random","React","Component","MergeSortVisualizer","animationTimeout","animation","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","newHeight","height","console","log","map","idx","key","onChange","onClick","mergeSort","BubbleSortVisualizer","swapped","tmp","getBubbleSortAnimations","color","sort","App","path","component","exact","Error","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b3aa08f.chunk.js","sourcesContent":["import React from 'react';\nimport './Navigation.css';\n\nimport { NavLink } from 'react-router-dom';\n\nconst Navigation = () => {\n    return (\n        <div className=\"Nav\">\n            <NavLink className=\"NavLink\" to=\"/merge-sort\">Merge Sort</NavLink>\n            <NavLink className=\"NavLink\" to=\"/bubble-sort\">Bubble Sort</NavLink>\n        </div>\n    );\n};\n\nexport default Navigation;","function createAnimation(type, indexes) {\n    return {\n        cmd: type,\n        indexes: indexes,\n    }\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) {\n        return array;\n    }\n    const _merge = (array, startIdx, middleIdx, endIdx, arrayCopy, animations,) => {\n\n        let k = startIdx;\n        let i = startIdx;\n        let j = middleIdx + 1;\n        while (i <= middleIdx && j <= endIdx) {\n            animations.push(createAnimation(\"highlight\", [i, j]));\n            if (arrayCopy[i] <= arrayCopy[j]) {\n                animations.push(createAnimation('resize', [k, arrayCopy[i]]));\n                array[k++] = arrayCopy[i++];\n            } else {\n                animations.push(createAnimation('resize', [k, arrayCopy[j]]));\n                array[k++] = arrayCopy[j++];\n            }\n        }\n        while (i <= middleIdx) {\n            animations.push(createAnimation(\"highlight\", [i, i]));\n            animations.push(createAnimation(\"resize\", [k, arrayCopy[i]]));\n            array[k++] = arrayCopy[i++];\n        }\n        while (j <= endIdx) {\n            animations.push(createAnimation(\"highlight\", [j, j]));\n            animations.push(createAnimation(\"resize\", [k, arrayCopy[j]]));\n            array[k++] = arrayCopy[j++];\n        }\n    };\n\n    const _mergeSort = (array, startIdx, endIdx, arrayCopy, animations) => {\n        if (startIdx === endIdx) return;\n        const middleIdx = Math.floor((startIdx + endIdx) / 2);\n        _mergeSort(arrayCopy, startIdx, middleIdx, array, animations);\n        _mergeSort(arrayCopy, middleIdx + 1, endIdx, array, animations);\n        _merge(array, startIdx, middleIdx, endIdx, arrayCopy, animations);\n    };\n    const arrayCopy = array.slice();\n    _mergeSort(array, 0, array.length - 1, arrayCopy, animations);\n    return animations;\n}\n\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < array.length; i++) {\n            if (array[i] > array[i + 1]) {\n                animations.push(createAnimation(\"highlight\", [i, i + 1]));\n                let tmp = array[i];\n                array[i] = array[i + 1];\n                animations.push(createAnimation(\"resize\", [i, array[i + 1]]));\n                array[i + 1] = tmp;\n                animations.push(createAnimation(\"resize\", [i + 1, tmp]));\n                swapped = true;\n                animations.push(createAnimation(\"un-highlight\", [i, i + 1]));\n            }\n        }\n    } while (swapped);\n    return animations;\n}","import React from 'react';\nimport './sortingVisualizer.css'\n\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms';\n\n// TODO make these an options on the page\nconst ANIMATION_SPEED_MS = 50;\nconst PRIMARY_COLOR = '#DCDADA';\nconst SORTED_COLOR = '#40e0d0';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            arraySize: 100,\n            array: [],\n            animationTimeouts: [],\n            animationSpeedMS: ANIMATION_SPEED_MS,\n            primaryColor: PRIMARY_COLOR,\n            sortedColor: SORTED_COLOR,\n        };\n        this.onSizeChange = this.onSizeChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.resetArray()\n    }\n\n    componentWillUnmount() {\n        this.resetArray()\n    }\n\n    cancel() {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        // Reset the colors in case it was sorted previously.\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n        }\n        const animationTimeouts = this.state.animationTimeouts;\n        for (let i=0; i<animationTimeouts.length; i++) {\n            clearTimeout(animationTimeouts[i]);\n        }\n        this.setState({animationTimeouts: []});\n    }\n\n    onSizeChange(e) {\n        this.cancel();\n        this.updateSize(e.target.value);\n        this.setState({arraySize: e.target.value})\n    }\n    updateSize(arraySize) {\n        const array = [];\n        for (let i = 0; i < arraySize; i++) {\n            let min = 5;\n            let max = 300;\n            let randNum = Math.floor(Math.random() * (max - min + 1) + min);\n            array.push(randNum)\n        }\n        this.setState({array: array, arraySize: arraySize});\n    }\n\n    resetArray() {\n        this.cancel();\n        this.updateSize(this.state.arraySize);\n    }\n}\n","import React from 'react';\nimport './sortingVisualizer.css'\n\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms';\nimport SortingVisualizer from \"./sortingVisualizer\";\n\nexport default class MergeSortVisualizer extends SortingVisualizer {\n\n    mergeSort() {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        const copyArray = this.state.array.slice();\n        const animations = getMergeSortAnimations(copyArray);\n        const animationTimeouts = this.state.animationTimeouts;\n        let animationTimeout = 0;\n        for (let i = 0; i < animations.length; i++) {\n            const animation = animations[i];\n            switch (animation.cmd) {\n                case \"highlight\":\n                    const [barOneIdx, barTwoIdx] = animation.indexes;\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    animationTimeout = setTimeout(() => {\n                        barOneStyle.backgroundColor = this.state.sortedColor;\n                        barTwoStyle.backgroundColor = this.state.sortedColor;\n                    }, i * this.state.animationSpeedMS);\n                    animationTimeouts.push(animationTimeout);\n                    this.setState({animationTimeouts: animationTimeouts});\n                    break;\n                case \"resize\":\n                    animationTimeout = setTimeout(() => {\n                        const [barOneIdx, newHeight] = animation.indexes;\n                        const barOneStyle = arrayBars[barOneIdx].style;\n                        barOneStyle.height = `${newHeight}px`;\n                    }, i * this.state.animationSpeedMS);\n                    animationTimeouts.push(animationTimeout);\n                    this.setState({animationTimeouts: animationTimeouts});\n                    break;\n                default:\n                    console.log(`Animation Error: Unknown cmd: ${animation.cmd}`)\n            }\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n        return (\n            <div className=\"SortingVisualizer MergeSort\">\n                <h1>Merge Sort</h1>\n                <div>\n                    {array.map((value, idx) =>\n                        <div className=\"array-bar\" style={{height: `${value}px`}} key={idx}>\n                        </div>\n                    )}\n                </div>\n                <label>Size</label>\n                <input onChange={this.onSizeChange}/>\n                <button onClick={() => this.resetArray()}>Reset</button>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './sortingVisualizer.css'\nimport SortingVisualizer from \"./sortingVisualizer\";\nimport {getBubbleSortAnimations} from \"../sortingAlgorithms/sortingAlgorithms\";\n\nexport default class BubbleSortVisualizer extends SortingVisualizer {\n    sort() {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        const copyArray = this.state.array.slice();\n        const animations = getBubbleSortAnimations(copyArray);\n        console.log(animations);\n        const animationTimeouts = this.state.animationTimeouts;\n        let animationTimeout = 0;\n        for (let i = 0; i < animations.length; i++) {\n            const animation = animations[i];\n            let barOneIdx = 0;\n            let barTwoIdx = 0;\n            switch (animation.cmd) {\n                case \"highlight\":\n                case \"un-highlight\":\n                    [barOneIdx, barTwoIdx] = animation.indexes;\n                    const color = animation.cmd === \"highlight\" ? this.state.sortedColor : this.state.primaryColor;\n                    animationTimeout = setTimeout(() => {\n                        arrayBars[barOneIdx].style.backgroundColor = color;\n                        arrayBars[barTwoIdx].style.backgroundColor = color;\n                    }, i * this.state.animationSpeedMS);\n                    animationTimeouts.push(animationTimeout);\n                    this.setState({animationTimeouts: animationTimeouts});\n                    break;\n                case \"resize\":\n                    animationTimeout = setTimeout(() => {\n                        const [barOneIdx, newHeight] = animation.indexes;\n                        const barOneStyle = arrayBars[barOneIdx].style;\n                        barOneStyle.height = `${newHeight}px`;\n                    }, i * this.state.animationSpeedMS);\n                    animationTimeouts.push(animationTimeout);\n                    this.setState({animationTimeouts: animationTimeouts});\n                    break;\n                default:\n                    console.log(`Animation Error: Unknown cmd: ${animation.cmd}`)\n            }\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n        return (\n            <div className=\"SortingVisualizer BubbleSort\">\n                <h1>Bubble Sort</h1>\n                <div className=\"visualizer-container\">\n                    <div className=\"bar-container\">\n                    {array.map((value, idx) =>\n                        <div className=\"array-bar\" style={{height: `${value}px`}} key={idx}>\n                        </div>\n                    )}\n                    </div>\n                </div>\n                <label>Size</label>\n                <input onChange={this.onSizeChange}/>\n                <button onClick={() => this.resetArray()}>Reset</button>\n                <button onClick={() => this.sort()}>Sort</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Navigation from './components/Navigation';\nimport MergeSortVisualizer from \"./sortingVisualizer/mergeSortVisualizer\";\nimport BubbleSortVisualizer from \"./sortingVisualizer/bubbleSortVisualizer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Navigation />\n                    <Switch>\n                        {/* Setting default to merge sort TODO change it to somethign else later*/}\n                        <Route path=\"/\" component={MergeSortVisualizer} exact/>\n                        <Route path=\"/merge-sort\" component={MergeSortVisualizer}/>\n                        <Route path=\"/bubble-sort\" component={BubbleSortVisualizer}/>\n                        <Route component={Error}/>\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}