{"version":3,"sources":["components/Navigation.jsx","sortingAlgorithms/sortingAlgorithms.jsx","sortingVisualizer/sortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","to","createAnimation","type","indexes","cmd","swap","items","i","j","temp","getMergeSortAnimations","array","animations","length","arrayCopy","slice","_mergeSort","startIdx","endIdx","middleIdx","Math","floor","k","push","fillRemaining","idxCounter","_merge","getBubbleSortAnimations","swapped","tmp","getInsertionSortAnimations","key","getQuickSortAnimations","quickSort","left","right","index","pivotIndex","pivot","partition","getHeapSortAnimations","heapify","n","largest","l","r","heapSort","SortingVisualizer","props","state","arraySize","animationTimeouts","animationSpeedMS","primaryColor","sortedColor","getAnimations","onSizeChange","bind","this","resetArray","arrayBars","document","getElementsByClassName","copyArray","animationTimeout","animation","color","setTimeout","style","backgroundColor","setState","barOneIdx","newHeight","height","console","log","clearTimeout","e","cancel","targetValue","target","value","updateSize","randNum","random","name","width","map","idx","onChange","onClick","sort","React","Component","MergeSortVisualizer","BubbleSortVisualizer","InsertionSortVisualizer","QuickSortVisualizer","HeapSortVisualizer","App","basename","exact","path","component","Error","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26074d0d.chunk.js","sourcesContent":["import React from 'react';\nimport './Navigation.css';\n\nimport { NavLink } from 'react-router-dom';\n\nconst Navigation = () => {\n    return (\n        <div className=\"Nav\">\n            <NavLink className=\"NavLink\" to=\"/merge-sort\">Merge Sort</NavLink>\n            <NavLink className=\"NavLink\" to=\"/bubble-sort\">Bubble Sort</NavLink>\n            <NavLink className=\"NavLink\" to=\"/insertion-sort\">Insertion Sort</NavLink>\n            <NavLink className=\"NavLink\" to=\"/quick-sort\">Quick Sort</NavLink>\n            <NavLink className=\"NavLink\" to=\"/heap-sort\">Heap Sort</NavLink>\n        </div>\n    );\n};\n\nexport default Navigation;","function createAnimation(type, indexes) {\n    return {\n        cmd: type,\n        indexes: indexes,\n    }\n}\n\nfunction swap(items, i, j) {\n    const temp = items[i];\n    items[i] = items[j];\n    items[j] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) {\n        return array;\n    }\n    const _merge = (array, startIdx, middleIdx, endIdx, arrayCopy, animations,) => {\n\n        let k = startIdx;\n        let i = startIdx;\n        let j = middleIdx + 1;\n        while (i <= middleIdx && j <= endIdx) {\n            animations.push(createAnimation(\"highlight\", [i, j]));\n            if (arrayCopy[i] <= arrayCopy[j]) {\n                animations.push(createAnimation('resize', [k, arrayCopy[i]]));\n                animations.push(createAnimation(\"un-highlight\", [i, j]));\n                array[k++] = arrayCopy[i++];\n            } else {\n                animations.push(createAnimation('resize', [k, arrayCopy[j]]));\n                animations.push(createAnimation(\"un-highlight\", [i, j]));\n                array[k++] = arrayCopy[j++];\n            }\n        }\n        const fillRemaining = (idxCounter, endIdx) => {\n            while (idxCounter <= endIdx) {\n                animations.push(createAnimation(\"highlight\", [idxCounter, idxCounter]));\n                animations.push(createAnimation(\"resize\", [k, arrayCopy[idxCounter]]));\n                animations.push(createAnimation(\"un-highlight\", [idxCounter, idxCounter]));\n                array[k++] = arrayCopy[idxCounter++];\n            }\n        };\n        fillRemaining(i, middleIdx);\n        fillRemaining(j, endIdx);\n    };\n\n    const _mergeSort = (array, startIdx, endIdx, arrayCopy, animations) => {\n        if (startIdx === endIdx) return;\n        const middleIdx = Math.floor((startIdx + endIdx) / 2);\n        _mergeSort(arrayCopy, startIdx, middleIdx, array, animations);\n        _mergeSort(arrayCopy, middleIdx + 1, endIdx, array, animations);\n        _merge(array, startIdx, middleIdx, endIdx, arrayCopy, animations);\n    };\n    const arrayCopy = array.slice();\n    _mergeSort(array, 0, array.length - 1, arrayCopy, animations);\n    return animations;\n}\n\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < array.length; i++) {\n            if (array[i] > array[i + 1]) {\n                animations.push(createAnimation(\"highlight\", [i, i + 1]));\n                let tmp = array[i];\n                array[i] = array[i + 1];\n                animations.push(createAnimation(\"resize\", [i, array[i + 1]]));\n                array[i + 1] = tmp;\n                animations.push(createAnimation(\"resize\", [i + 1, tmp]));\n                swapped = true;\n                animations.push(createAnimation(\"un-highlight\", [i, i + 1]));\n            }\n        }\n    } while (swapped);\n    return animations;\n}\n\nexport function getInsertionSortAnimations(array) {\n    const animations = [];\n    for (let i = 1; i < array.length; i++) {\n        const key = array[i];\n        let j = i - 1;\n        while (j >= 0 && key < array[j]) {\n            animations.push(createAnimation(\"highlight\", [i, j]));\n            array[j + 1] = array[j];\n            animations.push(createAnimation(\"resize\", [j + 1, array[j]]));\n            animations.push(createAnimation(\"un-highlight\", [i, j]));\n            j--\n        }\n        animations.push(createAnimation(\"resize\", [j + 1, key]));\n        array[j + 1] = key\n    }\n    return animations\n}\n\n\nexport function getQuickSortAnimations(array) {\n    const animations = [];\n    const partition = (items, left, right) => {\n        const pivotIndex = Math.floor((right + left) / 2);\n        const pivot = items[pivotIndex];\n        animations.push(createAnimation(\"highlight\", [pivotIndex]));\n        let i = left,\n            j = right;\n        while (i <= j) {\n            while (items[i] < pivot) {\n                animations.push(createAnimation(\"highlight\", [i]));\n                animations.push(createAnimation(\"un-highlight\", [i]));\n                i++;\n            }\n            while (items[j] > pivot) {\n                animations.push(createAnimation(\"highlight\", [j]));\n                animations.push(createAnimation(\"un-highlight\", [j]));\n                j--;\n            }\n            if (i <= j) {\n                swap(array, i, j);\n                animations.push(createAnimation(\"highlight\", [i, j]));\n                animations.push(createAnimation(\"resize\", [i, items[i]]));\n                animations.push(createAnimation(\"resize\", [j, items[j]]));\n                animations.push(createAnimation(\"un-highlight\", [i, j]));\n                i++;\n                j--;\n            }\n        }\n        animations.push(createAnimation(\"un-highlight\", [pivotIndex]));\n        return i;\n    };\n\n    const quickSort = (items, left, right) => {\n        let index;\n        if (items.length > 1) {\n            index = partition(items, left, right);\n            if (left < index - 1) {\n                quickSort(items, left, index - 1);\n            }\n            if (index < right) {\n                quickSort(items, index, right);\n            }\n        }\n    };\n    quickSort(array, 0, array.length-1);\n    return animations\n}\n\nexport function getHeapSortAnimations(array) {\n    const animations = [];\n    const heapify = (items, n, i) => {\n        let largest = i,\n            l = 2 * i + 1,\n            r = 2 * i + 2;\n\n        if (l < n && items[i] < items[l]) {\n            animations.push(createAnimation(\"highlight\", [i, l]));\n            animations.push(createAnimation(\"un-highlight\", [i, l]));\n            largest = l\n        }\n\n        if (r < n && items[largest] < items[r]) {\n            animations.push(createAnimation(\"highlight\", [largest, r]));\n            animations.push(createAnimation(\"un-highlight\", [largest, r]));\n            largest = r\n        }\n        if (largest !== i) {\n            swap(items, i, largest);\n            animations.push(createAnimation(\"highlight\", [largest, i]));\n            animations.push(createAnimation(\"resize\", [i, items[i]]));\n            animations.push(createAnimation(\"resize\", [largest, items[largest]]));\n            animations.push(createAnimation(\"un-highlight\", [largest, i]));\n            heapify(items, n, largest);\n        }\n    };\n\n    const heapSort = (items) => {\n        let n = items.length;\n        for (let i = Math.floor(n / 2); i >= 0; i -= 1)      {\n            heapify(items, n, i);\n        }\n\n        for (let i = items.length - 1; i > 0; i--) {\n            swap(items, 0, i);\n            animations.push(createAnimation(\"highlight\", [i, 0]));\n            animations.push(createAnimation(\"resize\", [i, items[i]]));\n            animations.push(createAnimation(\"resize\", [0, items[0]]));\n            animations.push(createAnimation(\"un-highlight\", [i, 0]));\n            n--;\n            heapify(items, n,0);\n        }\n    };\n    heapSort(array);\n    return animations\n}","import React from 'react';\nimport './sortingVisualizer.css'\nimport {\n    getBubbleSortAnimations, getHeapSortAnimations,\n    getInsertionSortAnimations,\n    getMergeSortAnimations,\n    getQuickSortAnimations\n} from \"../sortingAlgorithms/sortingAlgorithms\";\n\nconst ANIMATION_SPEED_MS = 5;\nconst PRIMARY_COLOR = '#DCDADA';\nconst SORTED_COLOR = '#40e0d0';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            arraySize: 400,\n            array: [],\n            animationTimeouts: [],\n            animationSpeedMS: ANIMATION_SPEED_MS,\n            primaryColor: PRIMARY_COLOR,\n            sortedColor: SORTED_COLOR,\n            getAnimations: this.props.getAnimations,\n        };\n        this.onSizeChange = this.onSizeChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.resetArray()\n    }\n\n    componentWillUnmount() {\n        this.resetArray()\n    }\n\n    sort() {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        const copyArray = this.state.array.slice();\n        const animations = this.state.getAnimations(copyArray);\n        const animationTimeouts = this.state.animationTimeouts;\n        let animationTimeout = 0;\n        for (let i = 0; i < animations.length; i++) {\n            const animation = animations[i];\n            switch (animation.cmd) {\n                case \"highlight\":\n                case \"un-highlight\":\n                    const color = animation.cmd === \"highlight\" ? this.state.sortedColor : this.state.primaryColor;\n                    animationTimeout = setTimeout(() => {\n                        for (let i of animation.indexes) {\n                            arrayBars[i].style.backgroundColor = color;\n                        }\n                    }, i * this.state.animationSpeedMS);\n                    animationTimeouts.push(animationTimeout);\n                    this.setState({animationTimeouts: animationTimeouts});\n                    break;\n                case \"resize\":\n                    animationTimeout = setTimeout(() => {\n                        const [barOneIdx, newHeight] = animation.indexes;\n                        const barOneStyle = arrayBars[barOneIdx].style;\n                        barOneStyle.height = `${newHeight}px`;\n                    }, i * this.state.animationSpeedMS);\n                    animationTimeouts.push(animationTimeout);\n                    this.setState({animationTimeouts: animationTimeouts});\n                    break;\n                default:\n                    console.log(`Animation Error: Unknown cmd: ${animation.cmd}`)\n            }\n        }\n    }\n\n    cancel() {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        // Reset the colors in case it was sorted previously.\n        for (let i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n        }\n        const animationTimeouts = this.state.animationTimeouts;\n        for (let i=0; i<animationTimeouts.length; i++) {\n            clearTimeout(animationTimeouts[i]);\n        }\n        this.setState({animationTimeouts: []});\n    }\n\n    onSizeChange(e) {\n        this.cancel();\n        // this.updateSize(e.target.value);\n        let targetValue = e.target.value;\n        // MAX is 500\n        if (targetValue > 400){\n            targetValue = 400;\n        }\n        // Min is 1\n        if (targetValue < 30) {\n            targetValue = 30;\n        }\n        this.updateSize(targetValue);\n        e.target.value = targetValue;\n        this.setState({arraySize: e.target.value})\n    }\n    updateSize(arraySize) {\n        const array = [];\n        for (let i = 0; i < arraySize; i++) {\n            let min = 5;\n            let max = 300;\n            let randNum = Math.floor(Math.random() * (max - min + 1) + min);\n            array.push(randNum)\n        }\n        this.setState({array: array, arraySize: arraySize});\n    }\n\n    resetArray() {\n        this.cancel();\n        this.updateSize(this.state.arraySize);\n    }\n\n    render() {\n        const {array} = this.state;\n        return (\n            <div className=\"SortingVisualizer\">\n                <h1>{this.props.name}</h1>\n                <div className=\"visualizer-container\" style={{width: `${array.length * 4}px`}}>\n                    <div className=\"bar-container\">\n                        {array.map((value, idx) =>\n                            <div className=\"array-bar\" style={{height: `${value}px`}} key={idx}>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <label>Size</label>\n                <input type=\"number\" onChange={this.onSizeChange}/>\n                <button onClick={() => this.resetArray()}>Reset</button>\n                <button onClick={() => this.sort()}>Sort</button>\n            </div>\n        )\n    }\n}\n\nexport class MergeSortVisualizer extends SortingVisualizer {\n    render() {\n        return <SortingVisualizer name=\"Merge Sort\" getAnimations={getMergeSortAnimations} />\n    }\n}\n\nexport class BubbleSortVisualizer extends SortingVisualizer {\n    render() {\n        return <SortingVisualizer name=\"Bubble Sort\" getAnimations={getBubbleSortAnimations} />\n    }\n}\n\nexport class InsertionSortVisualizer extends SortingVisualizer {\n    render() {\n        return <SortingVisualizer name=\"Insertion Sort\" getAnimations={getInsertionSortAnimations} />\n    }\n}\n\nexport class QuickSortVisualizer extends SortingVisualizer {\n    render() {\n        return <SortingVisualizer name=\"Quick Sort\" getAnimations={getQuickSortAnimations} />\n    }\n}\n\nexport class HeapSortVisualizer extends SortingVisualizer {\n    render() {\n        return <SortingVisualizer name=\"Heap Sort\" getAnimations={getHeapSortAnimations} />\n    }\n}","import React, {Component} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport './App.css';\n\nimport Navigation from './components/Navigation';\nimport {\n    MergeSortVisualizer,\n    BubbleSortVisualizer,\n    InsertionSortVisualizer,\n    QuickSortVisualizer,\n    HeapSortVisualizer,\n} from \"./sortingVisualizer/sortingVisualizer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter basename='/'>\n                <div className=\"App\">\n                    <Navigation/>\n                    <Switch>\n                        <Route exact path=\"/\" component={MergeSortVisualizer}/>\n                        <Route exact path=\"/merge-sort\" component={MergeSortVisualizer}/>\n                        <Route exact path=\"/bubble-sort\" component={BubbleSortVisualizer}/>\n                        <Route exact path=\"/insertion-sort\" component={InsertionSortVisualizer}/>\n                        <Route exact path=\"/quick-sort\" component={QuickSortVisualizer}/>\n                        <Route exact path=\"/heap-sort\" component={HeapSortVisualizer}/>\n                        <Route component={Error}/>\n                    </Switch>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}