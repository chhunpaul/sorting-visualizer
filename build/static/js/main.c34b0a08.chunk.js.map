{"version":3,"sources":["sortingVisualizer/sortingVisualizer.jsx","sortingAlgorithms/sortingAlgorithms.jsx","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","arraySize","array","animationTimeouts","onSizeChange","bind","this","resetArray","arrayBars","document","getElementsByClassName","i","length","style","backgroundColor","clearTimeout","setState","e","cancel","updateSize","target","value","randNum","Math","floor","random","push","animations","arrayCopy","slice","_mergeSort","startIdx","endIdx","middleIdx","k","j","cmd","indexes","_merge","getMergeSortAnimations","animationTimeout","animation","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","newHeight","height","console","log","onChange","className","map","idx","key","onClick","mergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c34b0a08.chunk.js","sourcesContent":["import React from 'react';\r\nimport './sortingVisualizer.css'\r\n\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms';\r\n\r\n// TODO make these an options on the page\r\nconst ANIMATION_SPEED_MS = 5;\r\nconst PRIMARY_COLOR = '#DCDADA';\r\nconst SORTED_COLOR = 'turquoise';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arraySize: 300,\r\n            array: [],\r\n            animationTimeouts: [],\r\n        };\r\n        this.onSizeChange = this.onSizeChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray()\r\n    }\r\n\r\n    cancel() {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        // Reset the colors in case it was sorted previously.\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n        const animationTimeouts = this.state.animationTimeouts;\r\n        for (let i=0; i<animationTimeouts.length; i++) {\r\n            clearTimeout(animationTimeouts[i]);\r\n        }\r\n        this.setState({animationTimeouts: []});\r\n    }\r\n\r\n    onSizeChange(e) {\r\n        this.cancel();\r\n        this.updateSize(e.target.value);\r\n        this.setState({arraySize: e.target.value})\r\n    }\r\n    updateSize(arraySize) {\r\n        debugger;\r\n        const array = [];\r\n        debugger;\r\n        for (let i = 0; i < arraySize; i++) {\r\n            let min = 5;\r\n            let max = 500;\r\n            let randNum = Math.floor(Math.random() * (max - min + 1) + min);\r\n            array.push(randNum)\r\n        }\r\n        this.setState({array: array, arraySize: arraySize});\r\n    }\r\n\r\n    resetArray() {\r\n        this.cancel();\r\n        this.updateSize(this.state.arraySize);\r\n    }\r\n\r\n    // TODO disable the mergesort button once its finished\r\n    mergeSort() {\r\n        const copyArray = this.state.array.slice();\r\n        const animations = getMergeSortAnimations(copyArray);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const animationTimeouts = this.state.animationTimeouts;\r\n        let animationTimeout = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            // debugger;\r\n            const animation = animations[i];\r\n            switch (animation.cmd) {\r\n                case \"highlight\":\r\n                    const [barOneIdx, barTwoIdx] = animation.indexes;\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                    animationTimeout = setTimeout(() => {\r\n                        barOneStyle.backgroundColor = SORTED_COLOR;\r\n                        barTwoStyle.backgroundColor = SORTED_COLOR;\r\n                    }, i * ANIMATION_SPEED_MS);\r\n                    animationTimeouts.push(animationTimeout);\r\n                    this.setState({animationTimeouts: animationTimeouts});\r\n                    break;\r\n                case \"resize\":\r\n                    animationTimeout = setTimeout(() => {\r\n                        const [barOneIdx, newHeight] = animation.indexes;\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        barOneStyle.height = `${newHeight}px`;\r\n                    }, i * ANIMATION_SPEED_MS);\r\n                    animationTimeouts.push(animationTimeout);\r\n                    this.setState({animationTimeouts: animationTimeouts});\r\n                    break;\r\n                default:\r\n                    console.log(`Animation Error: Unknown cmd: ${animation.cmd}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        return (\r\n            <>\r\n                <label>Size</label>\r\n                <input onChange={this.onSizeChange}/>\r\n                <div className=\"container\">\r\n                    {array.map((value, idx) =>\r\n                        <div className=\"array-bar\" style={{height: `${value}px`}} key={idx}>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <button onClick={() => this.resetArray()}>Reset</button>\r\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) {\r\n        return array;\r\n    }\r\n    const _merge = (array, startIdx, middleIdx, endIdx, arrayCopy, animations,) => {\r\n\r\n        let k = startIdx;\r\n        let i = startIdx;\r\n        let j = middleIdx + 1;\r\n        while (i <= middleIdx && j <= endIdx) {\r\n            animations.push({cmd: \"highlight\", indexes: [i, j]});\r\n            if (arrayCopy[i] <= arrayCopy[j]) {\r\n                animations.push({cmd: 'resize', indexes: [k, arrayCopy[i]]});\r\n                array[k++] = arrayCopy[i++];\r\n            } else {\r\n                animations.push({cmd: 'resize', indexes: [k, arrayCopy[j]]});\r\n                array[k++] = arrayCopy[j++];\r\n            }\r\n        }\r\n        while (i <= middleIdx) {\r\n            animations.push({cmd: \"highlight\", indexes: [i, i]});\r\n            animations.push({cmd: 'resize', indexes: [k, arrayCopy[i]]});\r\n            array[k++] = arrayCopy[i++];\r\n        }\r\n        while (j <= endIdx) {\r\n            animations.push({cmd: \"highlight\", indexes: [j, j]});\r\n            animations.push({cmd: 'resize', indexes: [k, arrayCopy[j]]});\r\n            array[k++] = arrayCopy[j++];\r\n        }\r\n    };\r\n\r\n    const _mergeSort = (array, startIdx, endIdx, arrayCopy, animations) => {\r\n        if (startIdx === endIdx) return;\r\n        const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n        _mergeSort(arrayCopy, startIdx, middleIdx, array, animations);\r\n        _mergeSort(arrayCopy, middleIdx + 1, endIdx, array, animations);\r\n        _merge(array, startIdx, middleIdx, endIdx, arrayCopy, animations);\r\n    };\r\n    const arrayCopy = array.slice();\r\n    _mergeSort(array, 0, array.length - 1, arrayCopy, animations);\r\n    return animations;\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from \"./sortingVisualizer/sortingVisualizer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}